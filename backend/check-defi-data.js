import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDefiData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ defi_positions...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const totalCount = await prisma.defiPosition.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`);
    
    if (totalCount === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ - –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    const allPositions = await prisma.defiPosition.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            username: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log('\nüìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ defi_positions:');
    console.log('=' .repeat(80));
    
    allPositions.forEach((position, index) => {
      console.log(`\n${index + 1}. –ü–æ–∑–∏—Ü–∏—è ID: ${position.id}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${position.user.email} (ID: ${position.userId})`);
      console.log(`   –ü—É–ª: ${position.symbol} (${position.project})`);
      console.log(`   –ë–ª–æ–∫—á–µ–π–Ω: ${position.chain}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${position.status}`);
      console.log(`   APR –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${position.entryApy}%`);
      console.log(`   –¢–µ–∫—É—â–∏–π APR: ${position.currentApy}%`);
      console.log(`   TVL –ø—Ä–∏ –≤—Ö–æ–¥–µ: $${position.entryTvl.toLocaleString()}`);
      console.log(`   –¢–µ–∫—É—â–∏–π TVL: $${position.currentTvl.toLocaleString()}`);
      console.log(`   –î–∞—Ç–∞ –≤—Ö–æ–¥–∞: ${position.entryDate.toLocaleString('ru-RU')}`);
      if (position.exitDate) {
        console.log(`   –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${position.exitDate.toLocaleString('ru-RU')}`);
        console.log(`   –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${position.exitReason}`);
      }
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${position.createdAt.toLocaleString('ru-RU')}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${position.updatedAt.toLocaleString('ru-RU')}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const farmingCount = await prisma.defiPosition.count({
      where: { status: 'FARMING' }
    });
    
    const unstakedCount = await prisma.defiPosition.count({
      where: { status: 'UNSTAKED' }
    });
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ (FARMING): ${farmingCount}`);
    console.log(`   –ó–∞–∫—Ä—ã—Ç—ã–µ (UNSTAKED): ${unstakedCount}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userStats = await prisma.defiPosition.groupBy({
      by: ['userId'],
      _count: {
        id: true
      },
      include: {
        user: {
          select: {
            email: true,
            username: true
          }
        }
      }
    });
    
    console.log('\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    userStats.forEach(stat => {
      console.log(`   ${stat.user.email}: ${stat._count.id} –ø–æ–∑–∏—Ü–∏–π`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDefiData(); 