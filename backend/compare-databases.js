import sqlite3 from 'sqlite3'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
function connectSQLite() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database('./database.sqlite', (err) => {
      if (err) {
        reject(err)
      } else {
        resolve(db)
      }
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ SQLite
function querySQLite(db, sql) {
  return new Promise((resolve, reject) => {
    db.all(sql, (err, rows) => {
      if (err) {
        reject(err)
      } else {
        resolve(rows)
      }
    })
  })
}

async function compareDatabases() {
  let sqliteDb = null
  
  try {
    console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É SQLite –∏ PostgreSQL...\n')

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqliteDb = await connectSQLite()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ')

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ\n')

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:')
    
    const sqliteUsers = await querySQLite(sqliteDb, 'SELECT * FROM User')
    const postgresUsers = await prisma.user.findMany()
    
    console.log(`SQLite: ${sqliteUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
    console.log(`PostgreSQL: ${postgresUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
    
    if (sqliteUsers.length !== postgresUsers.length) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
      
      console.log('\nSQLite –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
      sqliteUsers.forEach(user => {
        console.log(`   ID: ${user.id}, Email: ${user.email}, Username: ${user.username}`)
      })
      
      console.log('\nPostgreSQL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
      postgresUsers.forEach(user => {
        console.log(`   ID: ${user.id}, Email: ${user.email}, Username: ${user.username}`)
      })
    } else {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç')
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    console.log('\nüì¶ –°–†–ê–í–ù–ï–ù–ò–ï –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–• –ü–ê–ö–ï–¢–û–í:')
    
    const sqlitePackages = await querySQLite(sqliteDb, 'SELECT * FROM InvestmentPackage')
    const postgresPackages = await prisma.investmentPackage.findMany()
    
    console.log(`SQLite: ${sqlitePackages.length} –ø–∞–∫–µ—Ç–æ–≤`)
    console.log(`PostgreSQL: ${postgresPackages.length} –ø–∞–∫–µ—Ç–æ–≤`)
    
    if (sqlitePackages.length !== postgresPackages.length) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
    } else {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç')
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    console.log('\nüí∞ –°–†–ê–í–ù–ï–ù–ò–ï –ò–ù–í–ï–°–¢–ò–¶–ò–ô:')
    
    const sqliteInvestments = await querySQLite(sqliteDb, 'SELECT * FROM Investment')
    const postgresInvestments = await prisma.investment.findMany()
    
    console.log(`SQLite: ${sqliteInvestments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π`)
    console.log(`PostgreSQL: ${postgresInvestments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π`)
    
    if (sqliteInvestments.length !== postgresInvestments.length) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
    } else {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç')
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:')
    
    const sqliteTransactions = await querySQLite(sqliteDb, 'SELECT * FROM Transaction')
    const postgresTransactions = await prisma.transaction.findMany()
    
    console.log(`SQLite: ${sqliteTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    console.log(`PostgreSQL: ${postgresTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    
    if (sqliteTransactions.length !== postgresTransactions.length) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
    } else {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç')
    }

    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    console.log(`SQLite: ${sqliteUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${sqlitePackages.length} –ø–∞–∫–µ—Ç–æ–≤, ${sqliteInvestments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, ${sqliteTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    console.log(`PostgreSQL: ${postgresUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${postgresPackages.length} –ø–∞–∫–µ—Ç–æ–≤, ${postgresInvestments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, ${postgresTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

    if (sqliteUsers.length === postgresUsers.length && 
        sqlitePackages.length === postgresPackages.length && 
        sqliteInvestments.length === postgresInvestments.length && 
        sqliteTransactions.length === postgresTransactions.length) {
      console.log('\nüéâ –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ù–ï–°–ï–ù–´ –í POSTGRESQL!')
    } else {
      console.log('\n‚ö†Ô∏è  –ù–ï –í–°–ï –î–ê–ù–ù–´–ï –ü–ï–†–ï–ù–ï–°–ï–ù–´!')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    if (sqliteDb) {
      sqliteDb.close()
    }
    await prisma.$disconnect()
  }
}

compareDatabases() 