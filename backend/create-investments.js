import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createInvestments() {
  try {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n')

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    const packages = await prisma.investmentPackage.findMany({
      where: { isActive: true },
      orderBy: { minAmount: 'asc' }
    })

    console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:')
    packages.forEach(pkg => {
      console.log(`   - ${pkg.name}: ${pkg.minAmount} - ${pkg.maxAmount} (${pkg.monthlyYield}%)`)
    })

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º
    const users = await prisma.user.findMany({
      where: {
        balance: {
          gt: 0
        }
      },
      orderBy: { balance: 'desc' }
    })

    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    users.forEach(user => {
      console.log(`   - ${user.email}: ${user.balance} –±–∞–ª–∞–Ω—Å`)
    })

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç
      let selectedPackage = null
      for (const pkg of packages) {
        if (user.balance >= pkg.minAmount && user.balance <= pkg.maxAmount) {
          selectedPackage = pkg
          break
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –±–µ—Ä–µ–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
      if (!selectedPackage) {
        selectedPackage = packages[packages.length - 1]
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
      const investmentAmount = Math.min(user.balance, selectedPackage.maxAmount)
      
      const investment = await prisma.investment.create({
        data: {
          userId: user.id,
          packageId: selectedPackage.id,
          amount: investmentAmount,
          startDate: new Date(),
          endDate: new Date(Date.now() + selectedPackage.duration * 24 * 60 * 60 * 1000),
          isActive: true,
          totalEarned: 0,
          createdAt: new Date()
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: user.id },
        data: {
          balance: {
            decrement: investmentAmount
          }
        }
      })

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
      await prisma.transaction.create({
        data: {
          userId: user.id,
          investmentId: investment.id,
          type: 'DEPOSIT',
          amount: investmentAmount,
          description: `Investment in ${selectedPackage.name}`,
          status: 'COMPLETED',
          createdAt: new Date()
        }
      })

      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${investmentAmount} –≤ –ø–∞–∫–µ—Ç ${selectedPackage.name}`)
      console.log(`   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance - investmentAmount}`)
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const activeInvestments = await prisma.investment.findMany({
      where: { isActive: true },
      include: {
        user: { select: { email: true } },
        package: true
      }
    })

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`   üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${activeInvestments.length}`)
    
    const totalInvested = activeInvestments.reduce((sum, inv) => sum + inv.amount, 0)
    console.log(`   üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${totalInvested}`)

    console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:')
    activeInvestments.forEach(inv => {
      console.log(`   - ${inv.user.email}: ${inv.amount} –≤ ${inv.package.name}`)
    })

    console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createInvestments() 