import sqlite3 from 'sqlite3'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcrypt'

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
function connectSQLite() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database('./database.sqlite', (err) => {
      if (err) {
        reject(err)
      } else {
        resolve(db)
      }
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ SQLite
function querySQLite(db, sql) {
  return new Promise((resolve, reject) => {
    db.all(sql, (err, rows) => {
      if (err) {
        reject(err)
      } else {
        resolve(rows)
      }
    })
  })
}

function mapTransactionType(type) {
  switch ((type || '').toLowerCase().replace(/ /g, '_')) {
    case 'deposit': return 'DEPOSIT'
    case 'withdrawal': return 'WITHDRAWAL'
    case 'daily_profit': case 'dailyprofit': return 'DAILY_PROFIT'
    case 'referral_bonus': case 'referralbonus': return 'REFERRAL_BONUS'
    case 'rank_bonus': case 'rankbonus': return 'RANK_BONUS'
    case 'rank_reward': case 'rankreward': return 'RANK_REWARD'
    case 'bonus': return 'BONUS'
    default: return 'BONUS'
  }
}

async function migrateData() {
  let sqliteDb = null
  
  try {
    console.log('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL...\n')

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqliteDb = await connectSQLite()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ')

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ\n')

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    const sqliteUsers = await querySQLite(sqliteDb, 'SELECT * FROM Users')
    
    for (const sqliteUser of sqliteUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ PostgreSQL
      const existingUser = await prisma.user.findFirst({
        where: {
          OR: [
            { email: sqliteUser.email },
            { username: sqliteUser.username || sqliteUser.email }
          ]
        }
      })

      if (!existingUser) {
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(sqliteUser.password, 10)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º referral code
        const referralCode = Math.random().toString(36).substring(2, 8).toUpperCase()
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await prisma.user.create({
          data: {
            email: sqliteUser.email,
            username: sqliteUser.username || sqliteUser.email,
            password: hashedPassword,
            balance: sqliteUser.balance || 0,
            rank: 'BRONZE',
            referralCode,
            createdAt: new Date(sqliteUser.createdAt),
            updatedAt: new Date(sqliteUser.updatedAt)
          }
        })
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.email}`)
      } else {
        console.log(`   ‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sqliteUser.email}`)
      }
    }

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
    console.log('\nüì¶ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...')
    const sqlitePackages = await querySQLite(sqliteDb, 'SELECT * FROM Packages')
    
    for (const sqlitePackage of sqlitePackages) {
      const existingPackage = await prisma.investmentPackage.findFirst({
        where: { name: sqlitePackage.name }
      })

      if (!existingPackage) {
        const newPackage = await prisma.investmentPackage.create({
          data: {
            name: sqlitePackage.name,
            minAmount: sqlitePackage.minAmount || 100,
            monthlyYield: sqlitePackage.monthlyYield || 10,
            duration: sqlitePackage.duration || 30,
            isActive: true,
            createdAt: new Date()
          }
        })
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞–∫–µ—Ç: ${newPackage.name}`)
      } else {
        console.log(`   ‚è≠Ô∏è  –ü–∞–∫–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sqlitePackage.name}`)
      }
    }

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    console.log('\nüí∞ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...')
    const sqliteInvestments = await querySQLite(sqliteDb, 'SELECT * FROM Investments')
    
    for (const sqliteInvestment of sqliteInvestments) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findFirst({
        where: { email: sqliteInvestment.userEmail }
      })
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç
      const package_ = await prisma.investmentPackage.findFirst({
        where: { name: sqliteInvestment.packageName }
      })

      if (user && package_) {
        const existingInvestment = await prisma.investment.findFirst({
          where: {
            userId: user.id,
            packageId: package_.id,
            amount: sqliteInvestment.amount
          }
        })

        if (!existingInvestment) {
                  const newInvestment = await prisma.investment.create({
          data: {
            userId: user.id,
            packageId: package_.id,
            amount: sqliteInvestment.amount,
            startDate: new Date(),
            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
            isActive: sqliteInvestment.isActive === 1,
            totalEarned: sqliteInvestment.totalEarned || 0,
            createdAt: new Date()
          }
        })
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${newInvestment.id}`)
        } else {
          console.log(`   ‚è≠Ô∏è  –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingInvestment.id}`)
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞–∫–µ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`)
      }
    }

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìà –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
    const sqliteTransactions = await querySQLite(sqliteDb, 'SELECT * FROM Transactions')
    
    for (const sqliteTransaction of sqliteTransactions) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findFirst({
        where: { email: sqliteTransaction.userEmail }
      })

      const mappedType = mapTransactionType(sqliteTransaction.type)

      if (user) {
        const existingTransaction = await prisma.transaction.findFirst({
          where: {
            userId: user.id,
            amount: sqliteTransaction.amount,
            type: mappedType,
            createdAt: new Date(sqliteTransaction.createdAt)
          }
        })

        if (!existingTransaction) {
          const newTransaction = await prisma.transaction.create({
            data: {
              userId: user.id,
              type: mappedType,
              amount: sqliteTransaction.amount,
              description: sqliteTransaction.description || 'Migrated transaction',
              status: 'COMPLETED',
              createdAt: new Date(sqliteTransaction.createdAt)
            }
          })
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${newTransaction.id}`)
        } else {
          console.log(`   ‚è≠Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingTransaction.id}`)
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`)
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const postgresUsers = await prisma.user.count()
    const postgresPackages = await prisma.investmentPackage.count()
    const postgresInvestments = await prisma.investment.count()
    const postgresTransactions = await prisma.transaction.count()
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PostgreSQL:')
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${postgresUsers}`)
    console.log(`   üì¶ –ü–∞–∫–µ—Ç–æ–≤: ${postgresPackages}`)
    console.log(`   üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${postgresInvestments}`)
    console.log(`   üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${postgresTransactions}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
  } finally {
    if (sqliteDb) {
      sqliteDb.close()
    }
    await prisma.$disconnect()
  }
}

migrateData() 