import 'dotenv/config'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function processDailyProfitDirectly() {
  try {
    console.log('üéØ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...\n')
    
    const activeInvestments = await prisma.investment.findMany({
      where: {
        isActive: true,
        endDate: {
          gte: new Date()
        }
      },
      include: {
        user: true,
        package: true
      }
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeInvestments.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n`)

    let totalProcessed = 0
    let totalProfit = 0

    for (const investment of activeInvestments) {
      console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ID: ${investment.id}`)
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${investment.user.username}`)
      console.log(`   –ü–∞–∫–µ—Ç: ${investment.package.name}`)
      console.log(`   –°—É–º–º–∞: $${investment.amount}`)
      
      const dailyYield = (investment.package.monthlyYield / 30) / 100
      const dailyProfit = investment.amount * dailyYield

      console.log(`   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${investment.package.monthlyYield}% –≤ –º–µ—Å—è—Ü`)
      console.log(`   –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${dailyYield}`)
      console.log(`   –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: $${dailyProfit.toFixed(2)}`)

      try {
        // Create transaction
        const transaction = await prisma.transaction.create({
          data: {
            userId: investment.userId,
            investmentId: investment.id,
            type: 'DAILY_PROFIT',
            amount: dailyProfit,
            description: `Daily profit from ${investment.package.name}`,
            status: 'COMPLETED'
          }
        })

        // Update user balance
        const updatedUser = await prisma.user.update({
          where: { id: investment.userId },
          data: {
            balance: {
              increment: dailyProfit
            }
          }
        })

        // Update investment
        const updatedInvestment = await prisma.investment.update({
          where: { id: investment.id },
          data: {
            totalEarned: {
              increment: dailyProfit
            },
            lastProfitDate: new Date()
          }
        })

        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${transaction.id}`)
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: $${updatedUser.balance.toFixed(2)}`)
        console.log(`   ‚úÖ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: $${updatedInvestment.totalEarned.toFixed(2)}`)
        
        totalProcessed++
        totalProfit += dailyProfit
        console.log('')
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ${investment.id}:`, error)
      }
    }

    console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${totalProcessed}`)
    console.log(`üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: $${totalProfit.toFixed(2)}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

processDailyProfitDirectly() 