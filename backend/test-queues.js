const BASE_URL = 'http://localhost:3000'

async function testQueues() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...')
    const healthResponse = await fetch(`${BASE_URL}/health`)
    if (!healthResponse.ok) {
      throw new Error(`Health check failed: ${healthResponse.status}`)
    }
    const healthData = await healthResponse.json()
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData)

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...')
    const packagesResponse = await fetch(`${BASE_URL}/api/packages`)
    if (!packagesResponse.ok) {
      throw new Error(`Failed to get packages: ${packagesResponse.status}`)
    }
    const packages = await packagesResponse.json()
    console.log('‚úÖ –ü–∞–∫–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', packages.length, '—à—Ç.')

    if (packages.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç...')
      const createPackageResponse = await fetch(`${BASE_URL}/api/packages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: 'Test Package',
          minAmount: 100,
          maxAmount: 10000,
          monthlyYield: 12,
          duration: 30,
          isActive: true
        })
      })
      if (createPackageResponse.ok) {
        const newPackage = await createPackageResponse.json()
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω:', newPackage.id)
      }
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    const usersResponse = await fetch(`${BASE_URL}/api/users`)
    if (!usersResponse.ok) {
      throw new Error(`Failed to get users: ${usersResponse.status}`)
    }
    const users = await usersResponse.json()
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', users.length, '—à—Ç.')

    if (users.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const createUserResponse = await fetch(`${BASE_URL}/api/users`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: 'test@example.com',
          username: 'testuser',
          password: 'password123',
          referralCode: 'TEST123'
        })
      })
      if (createUserResponse.ok) {
        const newUser = await createUserResponse.json()
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.id)
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏...')
    const investmentData = {
      userId: 1,
      packageId: 1,
      amount: 1000
    }
    const investmentResponse = await fetch(`${BASE_URL}/api/investments`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(investmentData)
    })
    if (!investmentResponse.ok) {
      const errorData = await investmentResponse.json()
      throw new Error(`Failed to create investment: ${errorData.error}`)
    }
    const investment = await investmentResponse.json()
    console.log('‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', investment.id)

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –±–æ–Ω—É—Å–∞
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞...')
    const bonusData = {
      userId: 1,
      amount: 50,
      reason: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ–Ω—É—Å'
    }
    const bonusResponse = await fetch(`${BASE_URL}/api/queue/bonus`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(bonusData)
    })
    if (!bonusResponse.ok) {
      const errorData = await bonusResponse.json()
      throw new Error(`Failed to publish bonus: ${errorData.error}`)
    }
    const bonusResult = await bonusResponse.json()
    console.log('‚úÖ –ë–æ–Ω—É—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', bonusResult)

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...')
    const dailyProfitResponse = await fetch(`${BASE_URL}/api/queue/daily-profit/trigger`, {
      method: 'POST'
    })
    if (!dailyProfitResponse.ok) {
      const errorData = await dailyProfitResponse.json()
      throw new Error(`Failed to trigger daily profit: ${errorData.error}`)
    }
    const dailyProfitResult = await dailyProfitResponse.json()
    console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã:', dailyProfitResult)

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...')
    await new Promise(resolve => setTimeout(resolve, 3000))

    // 7. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...')
    const statsResponse = await fetch(`${BASE_URL}/api/investments/stats/1`)
    if (!statsResponse.ok) {
      const errorData = await statsResponse.json()
      throw new Error(`Failed to get investment stats: ${errorData.error}`)
    }
    const stats = await statsResponse.json()
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats)

    // 8. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const transactionsResponse = await fetch(`${BASE_URL}/api/transactions/user/1`)
    if (!transactionsResponse.ok) {
      const errorData = await transactionsResponse.json()
      throw new Error(`Failed to get transactions: ${errorData.error}`)
    }
    const transactions = await transactionsResponse.json()
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', transactions.length, '—à—Ç.')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
    const bonusTransactions = transactions.filter(t => t.type === 'BONUS')
    const dailyProfitTransactions = transactions.filter(t => t.type === 'DAILY_PROFIT')
    console.log(`   - –ë–æ–Ω—É—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${bonusTransactions.length}`)
    console.log(`   - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${dailyProfitTransactions.length}`)

    // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    console.log('\n9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞...')
    const rankResponse = await fetch(`${BASE_URL}/api/ranks/update/1`, {
      method: 'POST'
    })
    if (!rankResponse.ok) {
      const errorData = await rankResponse.json()
      throw new Error(`Failed to update rank: ${errorData.error}`)
    }
    const rankResult = await rankResponse.json()
    console.log('‚úÖ –†–∞–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:', rankResult)

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìä –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:')
    console.log('   ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (Daily Profit)')
    console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (Deposit)')
    console.log('   ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã (Referral Bonus)')
    console.log('   ‚úÖ –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–∞–Ω–≥–∏ (Rank Bonus)')
    console.log('   ‚úÖ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞–Ω–≥–∏ (Rank Reward)')
    console.log('   ‚úÖ –û–±—â–∏–µ –±–æ–Ω—É—Å—ã (Bonus)')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message)
    console.error('Stack trace:', error.stack)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer() {
  const maxAttempts = 30
  let attempts = 0
  
  while (attempts < maxAttempts) {
    try {
      const response = await fetch(`${BASE_URL}/health`)
      if (response.ok) {
        console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!')
        return true
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
    
    attempts++
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞... (${attempts}/${maxAttempts})`)
    await new Promise(resolve => setTimeout(resolve, 1000))
  }
  
  console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
  return false
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
waitForServer().then(serverReady => {
  if (serverReady) {
    setTimeout(testQueues, 1000)
  }
}) 