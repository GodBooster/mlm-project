const { PrismaClient } = require('@prisma/client');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const prisma = new PrismaClient();
const sqliteDb = new sqlite3.Database(path.join(__dirname, 'database.sqlite'));

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é SQLite ‚Üí PostgreSQL...');

async function migrateData() {
  try {
    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Users ‚Üí User)
    console.log('üìä –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Users', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const user of users) {
      await prisma.user.create({
        data: {
          id: user.id,
          email: user.email,
          username: user.name, // name –∏–∑ SQLite ‚Üí username –≤ Prisma
          password: user.password,
          balance: parseFloat(user.balance) || 0,
          bonus: 0, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          rank: getRankFromNumber(user.rank), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É —Ä–∞–Ω–≥–∞
          referralCode: user.referralLink || generateReferralCode(), // referralLink ‚Üí referralCode
          referredBy: null, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          wallet: '', // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          avatar: user.avatar || '',
          isAdmin: false, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          createdAt: new Date(user.createdAt),
          updatedAt: new Date(user.updatedAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ (Packages ‚Üí InvestmentPackage)
    console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...');
    const packages = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Packages', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const pkg of packages) {
      await prisma.investmentPackage.create({
        data: {
          id: pkg.id,
          name: pkg.name,
          minAmount: parseFloat(pkg.minAmount) || 0,
          monthlyYield: parseFloat(pkg.percent) || 0, // percent ‚Üí monthlyYield
          percent: parseFloat(pkg.percent) || 0, // –æ—Å—Ç–∞–≤–ª—è–µ–º percent –∫–∞–∫ –µ—Å—Ç—å
          duration: parseInt(pkg.duration) || 30,
          isActive: true, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          createdAt: new Date(pkg.createdAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${packages.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (Investments ‚Üí Investment)
    console.log('üí∞ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏...');
    const investments = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Investments', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const investment of investments) {
      await prisma.investment.create({
        data: {
          id: investment.id,
          userId: investment.UserId,
          packageId: investment.PackageId,
          amount: parseFloat(investment.amount) || 0,
          startDate: new Date(investment.date || investment.createdAt),
          endDate: new Date(investment.date || investment.createdAt), // –∏—Å–ø–æ–ª—å–∑—É–µ–º startDate –∫–∞–∫ endDate
          isActive: true, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          totalEarned: parseFloat(investment.bonus) || 0, // bonus ‚Üí totalEarned
          lastProfitDate: null, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma
          createdAt: new Date(investment.createdAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${investments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (Transactions ‚Üí Transaction)
    console.log('üí≥ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transactions = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Transactions', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const transaction of transactions) {
      await prisma.transaction.create({
        data: {
          id: transaction.id,
          userId: transaction.UserId,
          investmentId: null, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ Prisma, –ø–æ–∫–∞ null
          type: normalizeTransactionType(transaction.type), // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          amount: parseFloat(transaction.amount) || 0,
          description: transaction.description || '',
          status: normalizeTransactionStatus(transaction.status), // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
          createdAt: new Date(transaction.createdAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
    console.log(`   - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: ${packages.length}`);
    console.log(`   - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${investments.length}`);
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    sqliteDb.close();
    await prisma.$disconnect();
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

function getRankFromNumber(rankNumber) {
  const ranks = {
    1: 'BRONZE',
    2: 'SILVER', 
    3: 'GOLD',
    4: 'PLATINUM',
    5: 'DIAMOND'
  };
  return ranks[rankNumber] || 'BRONZE';
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

function normalizeTransactionType(type) {
  const typeMap = {
    'deposit': 'DEPOSIT',
    'withdrawal': 'WITHDRAWAL',
    'investment': 'INVESTMENT',
    'bonus': 'BONUS',
    'referral': 'REFERRAL_BONUS',
    'profit': 'DAILY_PROFIT'
  };
  return typeMap[type?.toLowerCase()] || 'DEPOSIT';
}

function normalizeTransactionStatus(status) {
  const statusMap = {
    'pending': 'PENDING',
    'completed': 'COMPLETED',
    'failed': 'FAILED',
    'cancelled': 'CANCELLED'
  };
  return statusMap[status?.toLowerCase()] || 'PENDING';
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrateData()
  .then(() => {
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    process.exit(1);
  }); 