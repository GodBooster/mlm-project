const { PrismaClient } = require('@prisma/client');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const prisma = new PrismaClient();
const sqliteDb = new sqlite3.Database(path.join(__dirname, 'database.sqlite'));

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é SQLite ‚Üí PostgreSQL...');

async function migrateData() {
  try {
    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üìä –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM User', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const user of users) {
      await prisma.user.create({
        data: {
          id: user.id,
          email: user.email,
          username: user.username,
          password: user.password,
          balance: user.balance,
          bonus: user.bonus,
          rank: user.rank,
          referralCode: user.referralCode,
          referredBy: user.referredBy,
          wallet: user.wallet,
          avatar: user.avatar,
          isAdmin: user.isAdmin === 1,
          createdAt: new Date(user.createdAt),
          updatedAt: new Date(user.updatedAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...');
    const packages = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM InvestmentPackage', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const pkg of packages) {
      await prisma.investmentPackage.create({
        data: {
          id: pkg.id,
          name: pkg.name,
          description: pkg.description,
          minAmount: pkg.minAmount,
          maxAmount: pkg.maxAmount,
          dailyProfit: pkg.dailyProfit,
          duration: pkg.duration,
          isActive: pkg.isActive === 1,
          createdAt: new Date(pkg.createdAt),
          updatedAt: new Date(pkg.updatedAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${packages.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    console.log('üí∞ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏...');
    const investments = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Investment', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const investment of investments) {
      await prisma.investment.create({
        data: {
          id: investment.id,
          userId: investment.userId,
          packageId: investment.packageId,
          amount: investment.amount,
          dailyProfit: investment.dailyProfit,
          totalProfit: investment.totalProfit,
          status: investment.status,
          startDate: new Date(investment.startDate),
          endDate: investment.endDate ? new Date(investment.endDate) : null,
          createdAt: new Date(investment.createdAt),
          updatedAt: new Date(investment.updatedAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${investments.length} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('üí≥ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transactions = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM Transaction', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    for (const transaction of transactions) {
      await prisma.transaction.create({
        data: {
          id: transaction.id,
          userId: transaction.userId,
          type: transaction.type,
          amount: transaction.amount,
          description: transaction.description,
          status: transaction.status,
          createdAt: new Date(transaction.createdAt),
          updatedAt: new Date(transaction.updatedAt)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
    console.log(`   - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: ${packages.length}`);
    console.log(`   - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${investments.length}`);
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    sqliteDb.close();
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrateData()
  .then(() => {
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    process.exit(1);
  }); 