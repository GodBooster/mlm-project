import PgBoss from 'pg-boss';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import dotenv from 'dotenv';

dotenv.config();

const prisma = new PrismaClient();

class QueueService {
  constructor() {
    this.boss = null;
    this.isStarted = false;
  }

  async initialize() {
    try {
      const connectionString = process.env.DATABASE_URL || 
        `postgresql://${process.env.POSTGRES_USER || 'postgres'}:${process.env.POSTGRES_PASSWORD || 'password'}@${process.env.POSTGRES_HOST || 'localhost'}:${process.env.POSTGRES_PORT || 5432}/${process.env.POSTGRES_DB || 'mlm_project'}`;

      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PG-BOSS...');
      
      this.boss = new PgBoss({
        connectionString,
        schema: 'pgboss',
        retryLimit: 5,
        retryDelay: 30,
        expireInSeconds: 60 * 15, // 15 minutes
        deleteAfterSeconds: 60 * 60 * 24, // 24 hours
        maxConnections: 10,
        newJobCheckInterval: 1000, // 1 sec
        clockMonitorIntervalSeconds: 10,
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        acquireTimeoutMillis: 30000,
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
        installSchema: true
      });

      console.log('[QUEUE] üîÑ Starting PG-BOSS...');
      await this.boss.start();
      this.isStarted = true;
      
      console.log('‚úÖ PG-BOSS —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      console.log('[QUEUE] üìä PG-BOSS status:', this.boss.state);
      
      // –ñ–¥–µ–º, –ø–æ–∫–∞ PG-BOSS –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
      console.log('[QUEUE] ‚è≥ Waiting for PG-BOSS to fully initialize...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      const isInstalled = await this.boss.isInstalled();
      console.log('[QUEUE] üìä PG-BOSS isInstalled:', isInstalled);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
      try {
        const testJobId = await this.boss.send('test.init', { test: true }, { priority: 1 });
        if (testJobId) {
          console.log('[QUEUE] ‚úÖ PG-BOSS is ready - test job created:', testJobId);
          await this.boss.deleteJob(testJobId);
        } else {
          console.log('[QUEUE] ‚ö†Ô∏è PG-BOSS test job returned null');
        }
      } catch (error) {
        console.log('[QUEUE] ‚ö†Ô∏è PG-BOSS test failed:', error.message);
      }
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á
      await this.registerJobHandlers();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –æ—á–µ—Ä–µ–¥–µ–π
      const isHealthy = await this.checkQueueHealth();
      if (!isHealthy) {
        console.log('[QUEUE] ‚ö†Ô∏è Queue health check failed, but continuing...');
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏
      const testResult = await this.testQueue();
      if (testResult) {
        console.log('[QUEUE] ‚úÖ Queue test passed - system is working');
      } else {
        console.log('[QUEUE] ‚ö†Ô∏è Queue test failed - fallback mode will be used');
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PG-BOSS:', error);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if (error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED') {
        console.log('[QUEUE] üîÑ Retrying connection in 5 seconds...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        try {
          console.log('[QUEUE] üîÑ Retrying PG-BOSS connection...');
          await this.boss.start();
          this.isStarted = true;
          console.log('‚úÖ PG-BOSS —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏');
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          await this.registerJobHandlers();
          const isHealthy = await this.checkQueueHealth();
          const testResult = await this.testQueue();
          
          if (testResult) {
            console.log('[QUEUE] ‚úÖ Queue test passed after retry');
          }
          
          return true;
        } catch (retryError) {
          console.error('[QUEUE] ‚ùå Retry failed:', retryError.message);
          this.isStarted = false;
          throw retryError;
        }
      }
      
      this.isStarted = false;
      throw error;
    }
  }

  async registerJobHandlers() {
    if (!this.boss) {
      throw new Error('PG-BOSS –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á...');

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    console.log('üìã –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏...');
    
    try {
      await this.boss.createQueue('user.register', { retryLimit: 3, retryDelay: 5 });
      console.log('‚úÖ Queue created: user.register');
      
      await this.boss.createQueue('user.login', { retryLimit: 2, retryDelay: 3 });
      console.log('‚úÖ Queue created: user.login');
      
      await this.boss.createQueue('investment.create', { retryLimit: 5, retryDelay: 10 });
      console.log('‚úÖ Queue created: investment.create');
      
      await this.boss.createQueue('withdrawal.process', { retryLimit: 3, retryDelay: 30 });
      console.log('‚úÖ Queue created: withdrawal.process');
      
      await this.boss.createQueue('bonus.calculate', { retryLimit: 2, retryDelay: 15 });
      console.log('‚úÖ Queue created: bonus.calculate');
      
      await this.boss.createQueue('email.send', { retryLimit: 3, retryDelay: 5 });
      console.log('‚úÖ Queue created: email.send');
      
      await this.boss.createQueue('rank.update', { retryLimit: 2, retryDelay: 10 });
      console.log('‚úÖ Queue created: rank.update');
      
      console.log('‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è Some queues already exist:', error.message);
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...');
    
    await this.boss.work('user.register', { teamSize: 3, teamConcurrency: 2 }, this.handleUserRegistration.bind(this));
    console.log('‚úÖ Handler registered: user.register');
    
    await this.boss.work('user.login', { teamSize: 5, teamConcurrency: 3 }, this.handleUserLogin.bind(this));
    console.log('‚úÖ Handler registered: user.login');
    
    await this.boss.work('investment.create', { teamSize: 2, teamConcurrency: 1 }, this.handleInvestmentCreate.bind(this));
    console.log('‚úÖ Handler registered: investment.create');
    
    await this.boss.work('withdrawal.process', { teamSize: 1, teamConcurrency: 1 }, this.handleWithdrawal.bind(this));
    console.log('‚úÖ Handler registered: withdrawal.process');
    
    await this.boss.work('bonus.calculate', { teamSize: 3, teamConcurrency: 2 }, this.handleBonusCalculation.bind(this));
    console.log('‚úÖ Handler registered: bonus.calculate');
    
    await this.boss.work('email.send', { teamSize: 5, teamConcurrency: 10 }, this.handleEmailSend.bind(this));
    console.log('‚úÖ Handler registered: email.send');
    
    await this.boss.work('rank.update', { teamSize: 2, teamConcurrency: 1 }, this.handleRankUpdate.bind(this));
    console.log('‚úÖ Handler registered: rank.update');

    console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  }

  // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –û–ß–ï–†–ï–î–¨
  async addUserRegistration(userData) {
    if (!this.isStarted || !this.boss) {
      console.log('‚ö†Ô∏è Queue service not started, throwing error for fallback');
      throw new Error('Queue service not available');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PG-BOSS —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    try {
      const isInstalled = await this.boss.isInstalled();
      if (!isInstalled) {
        console.log('‚ö†Ô∏è PG-BOSS not installed, throwing error for fallback');
        throw new Error('PG-BOSS not installed');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è PG-BOSS check failed: ${error.message}, throwing error for fallback`);
      throw new Error('PG-BOSS check failed');
    }
    
    try {
      console.log(`[QUEUE] Adding user registration job to queue: ${userData.email}`);
      console.log(`[QUEUE] üìä PG-BOSS isInstalled: true`);
      
      const jobId = await this.boss.send('user.register', userData, {
        priority: 10, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        retryLimit: 3,
        retryDelay: 5
      });
      
      if (!jobId) {
        console.log('‚ö†Ô∏è Queue returned null jobId for registration, throwing error for fallback');
        throw new Error('Queue returned null jobId for registration');
      }
      
      console.log(`[QUEUE] ‚úÖ User registration job added to queue: ${jobId}`);
      return jobId;
    } catch (error) {
      console.log(`‚ö†Ô∏è Queue error for registration: ${error.message}, throwing for fallback`);
      throw error;
    }
  }

  async addUserLogin(loginData) {
    return await this.boss.send('user.login', loginData, {
      priority: 8,
      retryLimit: 2,
      retryDelay: 3
    });
  }

  async addInvestmentCreation(investmentData) {
    return await this.boss.send('investment.create', investmentData, {
      priority: 9,
      retryLimit: 5,
      retryDelay: 10
    });
  }

  async addWithdrawalProcess(withdrawalData) {
    return await this.boss.send('withdrawal.process', withdrawalData, {
      priority: 10,
      retryLimit: 3,
      retryDelay: 30
    });
  }

  async addBonusCalculation(bonusData) {
    return await this.boss.send('bonus.calculate', bonusData, {
      priority: 6,
      retryLimit: 2,
      retryDelay: 15
    });
  }

  async addRankUpdate(rankData) {
    return await this.boss.send('rank.update', rankData, {
      priority: 7,
      retryLimit: 2,
      retryDelay: 10
    });
  }

  async addEmailSend(emailData) {
    if (!this.isStarted || !this.boss) {
      console.log('‚ö†Ô∏è Queue service not started, throwing error for fallback');
      throw new Error('Queue service not available');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PG-BOSS —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    try {
      const isInstalled = await this.boss.isInstalled();
      if (!isInstalled) {
        console.log('‚ö†Ô∏è PG-BOSS not installed, throwing error for fallback');
        throw new Error('PG-BOSS not installed');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è PG-BOSS check failed: ${error.message}, throwing error for fallback`);
      throw new Error('PG-BOSS check failed');
    }
    
    try {
      console.log(`[QUEUE] Adding email job to queue: ${emailData.type} -> ${emailData.to}`);
      console.log(`[QUEUE] üìä PG-BOSS isInstalled: true`);
      
      const jobId = await this.boss.send('email.send', emailData, {
        priority: 4,
        retryLimit: 3,
        retryDelay: 5
      });
      
      if (!jobId) {
        console.log('‚ö†Ô∏è Queue returned null jobId for email, throwing error for fallback');
        throw new Error('Queue returned null jobId for email');
      }
      
      console.log(`[QUEUE] ‚úÖ Email job added to queue: ${jobId}`);
      return jobId;
    } catch (error) {
      console.log(`‚ö†Ô∏è Queue error for email: ${error.message}, throwing for fallback`);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–æ–±—â–∏–π –º–µ—Ç–æ–¥)
  async addJob(queueName, data, options = {}) {
    if (!this.isStarted || !this.boss) {
      console.warn('‚ö†Ô∏è PG-BOSS –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
      return null;
    }

    try {
      const defaultOptions = {
        retryLimit: 3,
        retryDelay: 5000,
        expireInSeconds: 3600
      };

      const jobOptions = { ...defaultOptions, ...options };
      const jobId = await this.boss.send(queueName, data, jobOptions);
      
      console.log(`üì§ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å ${queueName}: ${jobId}`);
      return jobId;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å ${queueName}:`, error);
      throw error;
    }
  }



  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–î–ê–ß
  async handleUserRegistration(job) {
    console.log(`[QUEUE] Processing user registration job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid job data:', jobData);
      throw new Error('Invalid job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Job ID: ${id}, Data:`, data);
    
    try {
      const { email, username, password, referralCode, registrationIp } = data;
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await prisma.user.findFirst({
          where: { OR: [{ email }, { username }] }
        });
        
        if (existingUser) {
          console.log(`[QUEUE] ‚ö†Ô∏è User already exists: ${email}, skipping registration`);
        return existingUser;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
      const verificationToken = crypto.randomBytes(32).toString('hex');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É PendingRegistration
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
      await prisma.pendingRegistration.upsert({
        where: { email },
        update: {
          username,
          password,
          referralCode,
          verificationToken,
          verificationCode,
          expiresAt: new Date(Date.now() + 180 * 1000), // 180 seconds (3 minutes)
          registrationIp: registrationIp || 'unknown'
        },
        create: {
            email,
            username,
          password,
          referralCode,
          verificationToken,
          verificationCode,
          expiresAt: new Date(Date.now() + 180 * 1000), // 180 seconds (3 minutes)
          registrationIp: registrationIp || 'unknown'
        }
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const baseUrl = process.env.NODE_ENV === 'production' ? 'https://margine-space.com' : 'http://localhost:5173';
      const verifyUrl = `${baseUrl}/verify?token=${verificationToken}`;
      
      // ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–î–û–í –ò –°–°–´–õ–û–ö
      console.log(`|mlm-backend  | [REGISTRATION] EMAIL: ${email}`);
      console.log(`|mlm-backend  | [REGISTRATION] CODE: ${verificationCode}`);
      console.log(`|mlm-backend  | [REGISTRATION] TOKEN: ${verificationToken}`);
      console.log(`|mlm-backend  | [REGISTRATION] LINK: ${verifyUrl}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
      await this.addEmailSend({
        type: 'EMAIL_VERIFICATION',
        to: email,
        code: verificationCode,
        token: verificationToken
      });

      console.log(`[QUEUE] ‚úÖ Registration data saved to PendingRegistration for: ${email}`);
      return { email, username, verificationCode, verificationToken };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå User registration failed:`, error);
      throw error;
    }
  }

  async handleEmailSend(job) {
    console.log(`[QUEUE] Processing email send job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid email job data:', jobData);
      throw new Error('Invalid email job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Email Job ID: ${id}, Data:`, data);
    
    try {
      const { type, to, subject, text, html, code, token } = data;
      const emailService = await import('./email-service.js');
      
      // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô EMAIL
      if (type === 'EMAIL_VERIFICATION') {
        const baseUrl = process.env.NODE_ENV === 'production' ? 'https://margine-space.com' : 'http://localhost:5173';
        const verifyUrl = `${baseUrl}/verify?token=${token}`;
        console.log(`|mlm-backend  | [EMAIL-QUEUE] VERIFICATION EMAIL TO: ${to}`);
        console.log(`|mlm-backend  | [EMAIL-QUEUE] CODE: ${code}`);
        console.log(`|mlm-backend  | [EMAIL-QUEUE] TOKEN: ${token}`);
        console.log(`|mlm-backend  | [EMAIL-QUEUE] LINK: ${verifyUrl}`);
        
        await emailService.sendVerificationEmail(to, code || '123456', token);
      } else if (type === 'password-reset' && token) {
        const baseUrl = process.env.NODE_ENV === 'production' ? 'https://margine-space.com' : 'http://localhost:5173';
        const resetUrl = `${baseUrl}/reset-password?token=${token}`;
        console.log(`|mlm-backend  | [EMAIL-QUEUE] PASSWORD-RESET EMAIL TO: ${to}`);
        console.log(`|mlm-backend  | [EMAIL-QUEUE] TOKEN: ${token}`);
        console.log(`|mlm-backend  | [EMAIL-QUEUE] LINK: ${resetUrl}`);
        
        await emailService.sendPasswordResetEmail(to, token);
      } else {
        // –û–±—ã—á–Ω—ã–π email
        console.log(`|mlm-backend  | [EMAIL-QUEUE] GENERAL EMAIL TO: ${to} | SUBJECT: ${subject}`);
        await emailService.sendEmail(to, subject, text, html);
      }
      
      console.log(`|mlm-backend  | [EMAIL] MOCK EMAIL TO: ${to} | CODE: ${code || token || 'N/A'}`);
      return { success: true, timestamp: new Date().toISOString() };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Email send failed:`, error);
      console.log(`|mlm-backend  | [EMAIL] MOCK EMAIL TO: ${data.to} | CODE: ERROR`);
      throw error;
    }
  }

  async handleBonusCalculation(job) {
    console.log(`[QUEUE] Processing bonus calculation job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid bonus calculation job data:', jobData);
      throw new Error('Invalid bonus calculation job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Bonus Calculation Job ID: ${id}, Data:`, data);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–Ω—É—Å–∞
      const transaction = await prisma.transaction.create({
        data: {
          userId: data.userId,
          type: data.type,
          amount: data.amount,
          description: `${data.type} bonus`,
          status: 'COMPLETED'
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = await prisma.user.update({
        where: { id: data.userId },
        data: {
          balance: {
            increment: data.amount
          }
        }
      });

      console.log(`[QUEUE] ‚úÖ Bonus processed: User ${data.userId} - $${data.amount} (${data.type})`);
      return { 
        success: true, 
        transactionId: transaction.id,
        bonusAmount: data.amount,
        newBalance: updatedUser.balance,
        message: `${data.type} bonus of $${data.amount} processed successfully`
      };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Bonus calculation failed:`, error);
      throw error;
    }
  }

  async handleUserLogin(job) {
    console.log(`[QUEUE] Processing user login job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid user login job data:', jobData);
      throw new Error('Invalid user login job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] User Login Job ID: ${id}, Data:`, data);
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–æ–≥–∏–Ω–æ–≤
    return { success: true };
  }

  async handleInvestmentCreate(job) {
    console.log(`[QUEUE] Processing investment creation job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid investment creation job data:', jobData);
      throw new Error('Invalid investment creation job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Investment Creation Job ID: ${id}, Data:`, data);
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
      const { default: investmentService } = await import('../services/investment-service.js');
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const investment = await investmentService.createInvestment(
        data.userId, 
        data.packageId, 
        data.amount
      );
      
      console.log(`[QUEUE] ‚úÖ Investment created successfully: ${investment.id}`);
      return { 
        success: true, 
        investmentId: investment.id,
        message: `Investment of $${data.amount} created for package ${data.packageName}`
      };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Investment creation failed:`, error);
      throw error;
    }
  }

  async handleWithdrawal(job) {
    console.log(`[QUEUE] Processing withdrawal job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid withdrawal job data:', jobData);
      throw new Error('Invalid withdrawal job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Withdrawal Job ID: ${id}, Data:`, data);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
      const transaction = await prisma.transaction.create({
        data: {
          userId: data.userId,
          type: 'WITHDRAWAL',
          amount: data.amount,
          description: `Withdrawal to ${data.wallet}`,
          status: 'PENDING',
          wallet: data.wallet
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = await prisma.user.update({
        where: { id: data.userId },
        data: {
          balance: {
            decrement: data.amount
          }
        }
      });

      console.log(`[QUEUE] ‚úÖ Withdrawal processed: User ${data.username} - $${data.amount} to ${data.wallet}`);
      return { 
        success: true, 
        transactionId: transaction.id,
        newBalance: updatedUser.balance,
        message: `Withdrawal of $${data.amount} processed successfully`
      };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Withdrawal processing failed:`, error);
      throw error;
    }
  }

  async handleRankUpdate(job) {
    console.log(`[QUEUE] Processing rank update job:`, job);
    
    // PG-BOSS –ø–µ—Ä–µ–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const jobData = Array.isArray(job) ? job[0] : job;
    
    if (!jobData || !jobData.data) {
      console.error('[QUEUE] ‚ùå Invalid rank update job data:', jobData);
      throw new Error('Invalid rank update job data');
    }
    
    const { id, data } = jobData;
    console.log(`[QUEUE] Rank Update Job ID: ${id}, Data:`, data);
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞–Ω–≥–æ–≤
      const { default: rankService } = await import('../services/rank-service.js');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const rank = await rankService.updateUserRank(data.userId);
      
      console.log(`[QUEUE] ‚úÖ Rank updated successfully for user: ${data.userId}`);
      return { 
        success: true, 
        userId: data.userId,
        rank: rank,
        message: `Rank updated for user ${data.userId}`
      };
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Rank update failed:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
  async getQueueStats() {
    if (!this.isStarted) return null;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã PG-BOSS
      const stats = {
        pending: await this.boss.getQueueSize('pending'),
        completed: await this.boss.getQueueSize('completed'),
        failed: await this.boss.getQueueSize('failed'),
        active: await this.boss.getQueueSize('active')
      };
      
      console.log(`[QUEUE] üìä Queue stats:`, stats);
      return stats;
    } catch (error) {
      console.error(`[QUEUE] ‚ùå Failed to get queue stats:`, error.message);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–µ–π
  async checkQueueHealth() {
    if (!this.isStarted || !this.boss) {
      console.log('[QUEUE] ‚ùå Queue service not started');
      return false;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const stats = await this.getQueueStats();
      if (stats === null) {
        console.log('[QUEUE] ‚ùå Cannot get queue stats - database connection issue');
        return false;
      }
      
      console.log('[QUEUE] ‚úÖ Queue health check passed');
      return true;
    } catch (error) {
      console.error('[QUEUE] ‚ùå Queue health check failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
  async testQueue() {
    if (!this.isStarted || !this.boss) {
      console.log('[QUEUE] ‚ùå Cannot test queue - service not started');
      return false;
    }
    
    try {
      console.log('[QUEUE] üß™ Testing queue functionality...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PG-BOSS —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      const isInstalled = await this.boss.isInstalled();
      console.log('[QUEUE] üìä PG-BOSS isInstalled:', isInstalled);
      
      if (!isInstalled) {
        console.log('[QUEUE] ‚ùå PG-BOSS not installed, cannot test');
        return false;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
      try {
        await this.boss.createQueue('test.job', { retryLimit: 1, retryDelay: 1 });
        console.log('[QUEUE] ‚úÖ Test queue created');
      } catch (error) {
        console.log('[QUEUE] ‚ö†Ô∏è Test queue already exists');
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
      console.log('[QUEUE] üîÑ Attempting to create test job...');
      const testJobId = await this.boss.send('test.job', { message: 'test' }, {
        priority: 1,
        retryLimit: 1,
        retryDelay: 1
      });
      
      if (testJobId) {
        console.log(`[QUEUE] ‚úÖ Test job created successfully: ${testJobId}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        try {
          await this.boss.deleteJob(testJobId);
          console.log(`[QUEUE] ‚úÖ Test job deleted: ${testJobId}`);
        } catch (error) {
          console.log(`[QUEUE] ‚ö†Ô∏è Could not delete test job: ${error.message}`);
          // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è
          try {
            await this.boss.fail(testJobId, new Error('Test job cleanup'));
            console.log(`[QUEUE] ‚úÖ Test job marked as failed: ${testJobId}`);
          } catch (failError) {
            console.log(`[QUEUE] ‚ö†Ô∏è Could not mark test job as failed: ${failError.message}`);
          }
        }
        
        return true;
      } else {
        console.log('[QUEUE] ‚ùå Test job creation failed - returned null');
        console.log('[QUEUE] üîç Debug info - Boss methods:', Object.getOwnPropertyNames(this.boss));
        return false;
      }
    } catch (error) {
      console.error('[QUEUE] ‚ùå Queue test failed:', error.message);
      console.error('[QUEUE] üîç Full error:', error);
      return false;
    }
  }

  // Graceful shutdown
  async shutdown() {
    if (this.boss && this.isStarted) {
      console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã PG-BOSS...');
      await this.boss.stop();
      this.isStarted = false;
      console.log('‚úÖ PG-BOSS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (Singleton)
const queueService = new QueueService();

export default queueService;
