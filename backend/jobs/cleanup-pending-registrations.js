import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function cleanupPendingRegistrations() {
  try {
    console.log('üßπ Starting cleanup of expired pending registrations...');
    
    const result = await prisma.pendingRegistration.deleteMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });
    
    console.log(`‚úÖ Cleaned up ${result.count} expired pending registrations`);
    
    return result.count;
  } catch (error) {
    console.error('‚ùå Error cleaning up pending registrations:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
export function startCleanupScheduler() {
  console.log('üïê Starting pending registrations cleanup scheduler...');
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(async () => {
    try {
      await cleanupPendingRegistrations();
    } catch (error) {
      console.error('‚ùå Cleanup scheduler error:', error);
    }
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  
  // –ü–µ—Ä–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  setTimeout(async () => {
    try {
      await cleanupPendingRegistrations();
    } catch (error) {
      console.error('‚ùå Initial cleanup error:', error);
    }
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
}
