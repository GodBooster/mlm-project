const API_URL = 'http://localhost:3000';

async function testWrongCode() {
  console.log('=== TESTING WRONG VERIFICATION CODE ===');
  
  const testEmail = `wrongcode-${Date.now()}@example.com`;
  const testPassword = 'testpass123';
  const testUsername = `wrongcodeuser-${Date.now()}`;
  
  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log('üî∏ Step 1: Registration');
    const registerRes = await fetch(`${API_URL}/api/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        username: testUsername,
        password: testPassword
      })
    });
    
    const registerData = await registerRes.json();
    console.log('‚úÖ Registration response:', registerData);
    
    // 2. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('\nüî∏ Step 2: Waiting for processing...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    console.log('\nüî∏ Step 3: Testing WRONG verification code');
    const wrongCodeRes = await fetch(`${API_URL}/api/verify-email`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        code: '000000' // –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–û–î
      })
    });
    
    const wrongCodeData = await wrongCodeRes.json();
    console.log('Wrong code response status:', wrongCodeRes.status);
    console.log('Wrong code response:', wrongCodeData);
    
    if (wrongCodeRes.status === 400 && wrongCodeData.error === 'Invalid verification code') {
      console.log('‚úÖ CORRECT: Wrong code rejected properly');
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–Ω
      console.log('\nüî∏ Step 4: Checking that user was NOT created');
      const loginRes = await fetch(`${API_URL}/api/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: testEmail,
          password: testPassword
        })
      });
      
      if (loginRes.status === 401) {
        console.log('‚úÖ PERFECT: User was NOT created in main table');
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pending registration –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log('\nüî∏ Step 5: Checking pending registration still exists');
        const resendRes = await fetch(`${API_URL}/api/resend-verification`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: testEmail })
        });
        
        if (resendRes.ok) {
          console.log('‚úÖ PERFECT: Pending registration still exists');
          console.log('üî∏ User can try again with correct code');
          
          return { 
            success: true, 
            message: 'Wrong code handling works correctly',
            testEmail 
          };
        } else {
          console.log('‚ùå PROBLEM: Pending registration was removed');
        }
      } else {
        console.log('‚ùå CRITICAL PROBLEM: User was created despite wrong code!');
      }
    } else {
      console.log('‚ùå PROBLEM: Wrong code was not rejected properly');
      console.log('Expected: status 400, error "Invalid verification code"');
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testWrongCode();
