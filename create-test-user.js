#!/usr/bin/env node

import fetch from 'node-fetch';

const API_URL = 'http://localhost:3000';

async function createTestUser() {
  console.log('üß™ Creating test user with IP tracking...\n');

  const testEmail = `test-ip-${Date.now()}@example.com`;
  const testUsername = `testuser-${Date.now()}`;

  console.log(`üìß Test email: ${testEmail}`);
  console.log(`üë§ Test username: ${testUsername}`);

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å IP –∞–¥—Ä–µ—Å–æ–º
    console.log('\n1Ô∏è‚É£ Registering user with IP...');
    
    const registerRes = await fetch(`${API_URL}/api/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Forwarded-For': '192.168.1.100',
        'X-Real-IP': '10.0.0.50'
      },
      body: JSON.stringify({
        email: testEmail,
        username: testUsername,
        password: 'test123456'
      })
    });

    const registerData = await registerRes.json();
    console.log('‚úÖ Registration response:', registerData);

    if (!registerData.success) {
      throw new Error(`Registration failed: ${registerData.error}`);
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('\n2Ô∏è‚É£ Simulating email verification...');
    console.log('üìß Check server logs for verification code');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PendingRegistration (—á–µ—Ä–µ–∑ API)
    console.log('\n3Ô∏è‚É£ Checking PendingRegistration...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —Å IP
    console.log('\n4Ô∏è‚É£ Testing login with IP tracking...');
    
    const loginRes = await fetch(`${API_URL}/api/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Forwarded-For': '172.16.0.25',
        'CF-Connecting-IP': '203.0.113.10'
      },
      body: JSON.stringify({
        email: 'admin@margine-space.com',
        password: 'AdminSecurePass123!@#'
      })
    });

    const loginData = await loginRes.json();
    console.log('‚úÖ Login response:', loginData.success ? 'Success' : 'Failed');

    // 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüìä NEXT STEPS:');
    console.log('1. Open Prisma Studio: http://localhost:5555');
    console.log('2. Check PendingRegistration table for:', testEmail);
    console.log('3. Check User table for admin@margine-space.com');
    console.log('4. Look for registrationIp and lastLoginIp fields');
    
    console.log('\nüîç Expected IP addresses:');
    console.log(`   Registration IP: 192.168.1.100 (X-Forwarded-For)`);
    console.log(`   Login IP: 172.16.0.25 (X-Forwarded-For)`);

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

createTestUser();
