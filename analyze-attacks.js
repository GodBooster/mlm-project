const fs = require('fs');

function analyzeAttacks() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∞—Ç–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...\n');
  
  try {
    // –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ nginx
    const logContent = fs.readFileSync('/var/log/nginx/access.log', 'utf8');
    const lines = logContent.split('\n');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫
    const attackStats = {
      totalRequests: 0,
      attackRequests: 0,
      uniqueIPs: new Set(),
      attackTypes: {},
      topAttackers: {},
      timeDistribution: {}
    };
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞—Ç–∞–∫
    const attackPatterns = {
      phpunit: /phpunit.*eval-stdin/,
      thinkphp: /think.*invokefunction/,
      docker: /containers\/json/,
      phpInclude: /allow_url_include|auto_prepend_file/,
      sqlInjection: /union.*select|drop.*table|insert.*into/i,
      xss: /<script|javascript:|onload=/i,
      pathTraversal: /\.\.\/|\.\.\\/,
      wordpress: /wp-admin|wp-content|wp-includes/,
      joomla: /administrator|com_/,
      drupal: /sites\/default\/settings\.php/
    };
    
    lines.forEach(line => {
      if (!line.trim()) return;
      
      attackStats.totalRequests++;
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
      const match = line.match(/^(\S+) - - \[([^\]]+)\] "([^"]+)" (\d+) (\d+)/);
      if (!match) return;
      
      const [, ip, timestamp, request, status, bytes] = match;
      const [method, path] = request.split(' ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ç–∞–∫–∏
      let isAttack = false;
      let attackType = 'unknown';
      
      for (const [type, pattern] of Object.entries(attackPatterns)) {
        if (pattern.test(path)) {
          isAttack = true;
          attackType = type;
          break;
        }
      }
      
      if (isAttack) {
        attackStats.attackRequests++;
        attackStats.uniqueIPs.add(ip);
        
        // –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
        attackStats.attackTypes[attackType] = (attackStats.attackTypes[attackType] || 0) + 1;
        
        // –ü–æ–¥—Å—á–µ—Ç –∞—Ç–∞–∫—É—é—â–∏—Ö IP
        attackStats.topAttackers[ip] = (attackStats.topAttackers[ip] || 0) + 1;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const hour = new Date(timestamp).getHours();
        attackStats.timeDistribution[hour] = (attackStats.timeDistribution[hour] || 0) + 1;
      }
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–¢–ê–ö:');
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${attackStats.totalRequests}`);
    console.log(`–ê—Ç–∞–∫—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${attackStats.attackRequests}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫—É—é—â–∏—Ö IP: ${attackStats.uniqueIPs.size}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –∞—Ç–∞–∫: ${((attackStats.attackRequests / attackStats.totalRequests) * 100).toFixed(2)}%\n`);
    
    console.log('üéØ –¢–ò–ü–´ –ê–¢–ê–ö:');
    Object.entries(attackStats.attackTypes)
      .sort(([,a], [,b]) => b - a)
      .forEach(([type, count]) => {
        console.log(`  ${type}: ${count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      });
    console.log();
    
    console.log('üë• –¢–û–ü –ê–¢–ê–ö–£–Æ–©–ò–• IP:');
    Object.entries(attackStats.topAttackers)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .forEach(([ip, count]) => {
        console.log(`  ${ip}: ${count} –∞—Ç–∞–∫`);
      });
    console.log();
    
    console.log('‚è∞ –í–†–ï–ú–ï–ù–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–¢–ê–ö:');
    Object.entries(attackStats.timeDistribution)
      .sort(([a], [b]) => parseInt(a) - parseInt(b))
      .forEach(([hour, count]) => {
        console.log(`  ${hour}:00 - ${hour}:59: ${count} –∞—Ç–∞–∫`);
      });
    console.log();
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π –∞—Ç–∞–∫
    console.log('üéØ –¶–ï–õ–ò –ê–¢–ê–ö:');
    console.log('  ‚Ä¢ PHPUnit Exploit: –ü–æ–ø—ã—Ç–∫–∞ RCE —á–µ—Ä–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç—å PHPUnit');
    console.log('  ‚Ä¢ ThinkPHP Exploit: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    console.log('  ‚Ä¢ Docker API: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º');
    console.log('  ‚Ä¢ Path Traversal: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º');
    console.log('  ‚Ä¢ SQL Injection: –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('  ‚Ä¢ XSS: –ü–æ–ø—ã—Ç–∫–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ JavaScript');
    console.log();
    
    console.log('üõ°Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('  ‚úÖ –í—Å–µ –∞—Ç–∞–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è (404 –æ—à–∏–±–∫–∏)');
    console.log('  ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞—â–∏—â–µ–Ω –æ—Ç —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫');
    console.log('  üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Fail2ban –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
    console.log('  üîß –í–∫–ª—é—á–∏—Ç–µ UFW firewall');
    console.log('  üîß –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–≥–æ–≤:', error.message);
  }
}

analyzeAttacks();
