const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixForeignKeyIssues() {
  try {
    console.log('üîß Fixing foreign key constraint issues...');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ referredBy
    const usersWithInvalidReferrer = await prisma.user.findMany({
      where: {
        referredBy: {
          not: null
        }
      },
      select: {
        id: true,
        email: true,
        referredBy: true
      }
    });
    
    console.log(`Found ${usersWithInvalidReferrer.length} users with referredBy field`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of usersWithInvalidReferrer) {
      console.log(`\nüë§ User ${user.id} (${user.email}) has referredBy: "${user.referredBy}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º referral –∫–æ–¥–æ–º
      const referrer = await prisma.user.findFirst({
        where: { 
          referralCode: user.referredBy 
        }
      });
      
      if (referrer) {
        console.log(`‚úÖ Valid referral code: "${user.referredBy}" -> User ${referrer.id} (${referrer.email})`);
      } else {
        console.log(`‚ùå Invalid referral code: "${user.referredBy}" - no user found with this code`);
        
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É
        await prisma.user.update({
          where: { id: user.id },
          data: { referredBy: null }
        });
        
        console.log(`‚úÖ Fixed user ${user.id} - removed invalid referral code`);
      }
    }
    
    console.log('\nüéâ Foreign key constraint issues fixed!');
    console.log('üí° referredBy field correctly stores referral codes (strings), not user IDs');
    
  } catch (error) {
    console.error('‚ùå Error fixing foreign key issues:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixForeignKeyIssues();
