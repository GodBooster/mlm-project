const API_URL = 'http://localhost:3000';

async function testFinalVerification() {
  console.log('=== FINAL VERIFICATION TEST (POST ONLY) ===');
  
  const testEmail = `finaltest-${Date.now()}@example.com`;
  const testPassword = 'testpass123';
  const testUsername = `finaluser-${Date.now()}`;
  
  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log('üî∏ Step 1: Registration');
    const registerRes = await fetch(`${API_URL}/api/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        username: testUsername,
        password: testPassword
      })
    });
    
    const registerData = await registerRes.json();
    console.log('‚úÖ Registration response:', registerData);
    
    // 2. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('\nüî∏ Step 2: Waiting for queue processing...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüî∏ Step 3: Checking user NOT in main table');
    const loginRes1 = await fetch(`${API_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword
      })
    });
    
    if (loginRes1.status === 401) {
      console.log('‚úÖ CORRECT: User not in main table');
    } else {
      console.log('‚ùå PROBLEM: User already in main table!');
      return;
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    console.log('\nüî∏ Step 4: Testing WRONG verification code');
    const wrongCodeRes = await fetch(`${API_URL}/api/verify-email`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        code: '000000' // –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–û–î
      })
    });
    
    const wrongCodeData = await wrongCodeRes.json();
    console.log('Wrong code response status:', wrongCodeRes.status);
    console.log('Wrong code response:', wrongCodeData);
    
    if (wrongCodeRes.status === 400) {
      console.log('‚úÖ CORRECT: Wrong code rejected');
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï –ï–©–ï –ù–ï —Å–æ–∑–¥–∞–Ω
      console.log('\nüî∏ Step 5: Checking user STILL NOT in main table');
      const loginRes2 = await fetch(`${API_URL}/api/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: testEmail,
          password: testPassword
        })
      });
      
      if (loginRes2.status === 401) {
        console.log('‚úÖ PERFECT: User STILL NOT created after wrong code!');
        console.log('üéâ VERIFICATION PROTECTION WORKS CORRECTLY!');
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º pending registration –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log('\nüî∏ Step 6: Checking pending registration exists');
        const resendRes = await fetch(`${API_URL}/api/resend-verification`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: testEmail })
        });
        
        if (resendRes.ok) {
          console.log('‚úÖ PERFECT: Can resend verification (pending registration exists)');
          console.log('üî∏ Check server logs for the correct verification code');
          return { success: true, testEmail };
        } else {
          console.log('‚ùå Problem: Cannot resend verification');
        }
      } else {
        console.log('‚ùå CRITICAL PROBLEM: User created despite wrong code!');
        const loginData = await loginRes2.json();
        console.log('User data:', loginData.user);
      }
    } else {
      console.log('‚ùå PROBLEM: Wrong code not rejected properly');
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testFinalVerification();
